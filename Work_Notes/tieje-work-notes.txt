3/21/2022

3/22/2022

I might use the react testing library. Well, I want to use the react testing library.
It's still very early on. I'm pretty sure I know what I want to do and it is fairly simple... I think.
https://testing-library.com/docs/react-testing-library/intro/
Do I need to make tests fo this application? Is it even big enough.
Well it probably is... I'll learn it at the very end. I don't think it will help yet.

+ make a unique ID for every hexagon
    The unique ID should be its position in the hexgrid.
    I actually don't need to create a unique id for every hexagon.
    I thought that I might need to create a unique id for every hexagon because I would be using path to refer to their position.
    If I'm going to add a IDs to the hexagons, I'm going to either use a pull request or fork it myself...
    Fortunately, I can use class instead. The pathfinding example pretty much has what I want. I won't need to fork it.
    the unique classes are of the form of:
    hexagon-group 18,3,-21
    This is how it's done in the pathfinding example:
    https://github.com/Hellenic/react-hexgrid/blob/master/examples/pathfinding/src/App.js
    It may be a good idea to implement its cursor-finder as well.
+ create a custom initial zoom
    For the custom initial zoom, I'm going to need to determine where I can get this from panZoom...
    I certainly will not be using the fitToView functionf for this one.
    https://github.com/chrvadala/react-svg-pan-zoom
    I'll need to change the useEffect function...
    https://github.com/chrvadala/react-svg-pan-zoom/blob/main/docs/documentation.md#methods
    zoomOnViewerCenter(scaleFactor) - This is function I'll need.
    It works but it's focusing on the true center of the window instead of the SVG...
    It's assuming the SVG is rendered in the center of the window.
    I'll try moving the SVG to the center of the window with Tailwind?
    Or do I use fitToViewer in combination with zoomOnViewerCenter?
    perhaps I'll just use the normal zoom() function instead
    - Unfortunately, for smaller screens, it will start slightly to the left, which is not the worst thing.
+ bind v key for pointer
+ bind h key for hand scrolling
    onKeyPress is for the input text field
    This was insightful.
    https://www.querythreads.com/listen-to-keypress-for-document-in-reactjs/
    I may use this package though:
    https://github.com/donavon/use-event-listener
    The actual code was a bit confusing, but looking at the example allowed me to figure out how to accomplish tool changes.
    https://github.com/chrvadala/react-svg-pan-zoom/blob/main/examples/controlled-component/src/App.js
+ install tailwind
+ Wrote an article on what I did in the past about searching for the right library.


3/23/2022

Consider buy this svg:
https://www.vectorstock.com/royalty-free-vector/kawaii-school-background-with-cute-education-vector-15321280

- make toolbar bigger for both desktop and mobile.
    It's a bit... difficult. I'll need to do this later.
+ get cute pencil and office stationary wall-paper background
+ add a tool tip for image link
+ create static instructor interface
    + Create static sidebar on the left. It must have:
        + title input
        + lesson text input
        + feedback checkboxes
            + quantitative
            + verbal
        + node picture link input
            x default pics
                no need yet
+ Write an article about binding keys to actions using the hook module and refer to the link that you found
x create stateful instructor interface with json served by graphQL
    I *can* do it. But I built the backend exactly how I want it AND I know how to update it so... I don't really need graphQL.

3/28/2022

I'll just use React Query instead of Axios. If I did use Axios, I would need to create my own promise and async await functions.

Node Module Design
Node text or node image, never both. If no node image, then the title will be used with ellipses in the hexagon.
Look into React query.
I'm going to need a state manager... Probably something like Redux.
State that I need to manage:
    - Drag mode vs pointer mode
        - Within Pointer mode: Path creation mode:
            While in pointer mode, paths can be created
            Path Creation shortcut should probably be the "k" key
            - Starting hexagon
            - ending hexagon
            - Paths can only be deleted and created, not updated
    - pointer mode
        - clicking on the node grabs note data for that node
            Only the owner will have edit buttons for editing
        - edit button changes the state of that component to edit mode
    - theme
Redux middleware: this is going to be useful for whenever I need to update the API
https://blog.isquaredsoftware.com/presentations/react-redux-ts-intro-2020-12/#/61
Great graphic for what it means for me:
https://blog.isquaredsoftware.com/presentations/react-redux-ts-intro-2020-12/#/62

Make sidebar stateful

+ breakdown the sidebar into components
+ try using Redux to manage pointer mode and drag mode
+ sidebar must disappear while in drag mode and appear while in pointer mode
    So actually, There are two kinds of modes: keyboard shortcuts change visibility and dragging while one-screen buttons change only dragging.
    This bug is now a feature. I need to make sure I don't reproduce this in other features

3/29/2022
https://blog.isquaredsoftware.com/presentations/react-redux-ts-intro-2020-12/#/62
Use an existing skill tree
Some logic like verbal, quantitative feedback will be updated frequently.
I won't be using RTK Query because it's meant to be used with createAPI. I already have an API.
It turns out that a lot of middleware is actually included by default.
I should focus on createAsyncThunk and createEntityAdapter.
extraReducers are used to respond to other action types beside the types generated.
They are meant to reference external actions.
https://redux-toolkit.js.org/api/createSlice
extraReducers allows you to respond to an action in your slice reducer but does not create an action creator function
For example, they would be used in responding to a createAsyncThunk action, or perhaps responding to an action from another slice.
I'm actually supposed to use multiple slices - perhaps one slice per each functionality.
x I'm going to wire up slices such that there is an extraReducer function handling the visibility of the sidebar...
    I won't do this because I'm using useEffect already for this and it might get needlessly complicated.
I'll use react query for CRUD functionality... It could actually replace redux because it's a server-state library.
I'll use React Query for making post requests and see how it compares to Redux. I could just axios at this point... but we'll see.
I'll use the second checkbox for comparison.
Testing was successful for React Query. Posting seems simple enough. Updating... is a different matter.
It looks like useState() is used a whole lot for keeping track of and updating local state within the function.
It looks like the way that queryClient actually works is that it saves everything to the cache.
This contrasts from Redux in that redux is functional and pure but storing variables in cache stores state...
I figured out redux, but... well... It might be worth building with React Query instead. Someone who has gone through all of these
libraries says not to learn redux and to just use anything else. It's not that hard.
There's actually a little tidbit about how "React Query is not a replacement for local/client state management."
It even cites cases where I should use a state manager.
https://react-query.tanstack.com/guides/does-this-replace-client-state
I've decided that I won't be using React Query because I'm going to need a real state manager for this project.

+ Image address will need an edit button
x Change sidebar visibility logic to react query

3/30/2022

I can't use a normal useQuery because it refreshes too much.
I can't use a hook query because updating re-rendering constantly is pretty bad for the client.
Every time I move anything, setState causes a re-render of the whole thing.
I don't think I actually need RTK Query...
I need to figure out where and when to fetch data in redux.
https://daveceddia.com/where-fetch-data-redux/

3/31/2022
4/1/2022
I need to look at this later.
https://redux-toolkit.js.org/usage/usage-guide
There are no default paths to generate, but I can keep an object of paths.
    Create new paths state in redux to keep track of >
    Path. In this case, it's probably ok to do play Hex() objects within this state.
    The only problem is creating the object.
I'm running into a problem with RTK query. I'm not using is correctly. I need to redo the slice for everything.
https://www.softkraft.co/how-to-setup-slices-with-redux-toolkit/
There is an "old" way of doing this, and then there is the more streamlined approach.
https://stackoverflow.com/questions/60290580/how-do-i-make-an-api-call-using-createslice#60325398
It's not really an "old" way, more like a "custom" way to grab data.
Mission accomplished. Paths were successfully applied and state is better managed by redux in the actual component.

+ how to create nested JSON with serializers in django rest apis

4/2/2022

Check page 72 of the Fullstack React with TypeScript book for a better idea of what you're trying to do.
file:///Users/thomasfrancis/Desktop/fullstack-react-with-typescript-book-r11-basic.pdf
I'm running into some big problems. The shortcuts are fighting with me.
I need to make sure that the shortcuts only work when the SVG Pan is the current Ref.
One thing at a time.

+ use RTK Query to GET data from skill_tree_id 3 and apply it to PanZoomHexGrid
    + Grab data from API and apply it
        + apply patterns
        + apply paths
        x memoize data with Immer in your custom fetch
            That's... not how immer works...
+ apply data to sidebar
    + create static data display for the sidebar: use jsx conditionals and useState
    + change backend such that the notes are returned as well with skill trees
    + make it so that only one text input can be edited at a time

4/3/2022

The way that the checkboxes work right now, make it a little complicated to have a shortcut for it.
Well, it's probably for the best that checkboxes don't have shortcuts because they're so easy to mess up and miss.
It feels like I'll need to extend the Hexagon component.

+ checkboxes allow quantitative feedback allow verbal feedback
    x pass functions as props to function react component
    + add checkbox state to store
    + manually testing state changes
    + test posting boolean data to skill tree with skill_tree_id of 3
    x make git commit before fully switching to React Query
    x checkboxes functional with React Query, DO NOT delete Redux-related code yet
+ automatically focus on input or textarea using refs: page 72 of Fullstack React TypeScript
+ SVG shortcuts will not work when something is being edited in the sidebar
+ create sidebar shortcuts that only activate when the sidebar is not invisible and when nothing is being edited in the sidebar:
    for checkboxes
        x e - quantitative
        x w - verbal
    for editing
        + s - img address
        + d - title
        + f - body
+ pressing Enter submits the text to the input or textarea


4/4/2022

I need to save the last hexagon focused to localStorage.
https://dev.to/link2twenty/react-redux-and-localstorage-2lih
https://redux.js.org/api/createstore/
If I were to create a localStorage, it would need to save and define ALL states, not just one state.
Initial testing with Posting data to the API was a success.
I'll need to return the new hex_id from the API every time a POST method is used for skilltreehexagons.

+ make it so that clicking on a hexagon loads that hexagon's sidebar data
    x last hexagon focused should be saved in localStorage
        Do this later and save this to user data instead on the backend instead of localStorage
+ Write an article about the static instructor sidebar interface that you made
    It was more like an update on my progress for this project so far.
    Below was part of the update:
    + modern redux tool kit development
+ Write an articles about to how to safely delete a table in Django (do this on an example different project)

4/5/2022

I'll need to return the new hex_id from the API every time a POST method is used for skilltreehexagons.
https://www.django-rest-framework.org/tutorial/2-requests-and-responses/
https://www.django-rest-framework.org/api-guide/responses/
https://redux-toolkit.js.org/rtk-query/usage/mutations
It's better if I invalidate the query and grab again instead of generating a custom response.
https://redux.js.org/tutorials/essentials/part-8-rtk-query-advanced#invalidating-specific-items
Let's experiment with updating since. If I can figure out how update and invalidations work, maybe I can figure out how to reload for hexagon focused.
I'll perform the update with checkboxes.
https://restfulapi.net/rest-put-vs-post/
I did not understand PUT operation well at all. Supposedly, this operation does what I already need it to do.
If something already exist, then it will update it.
If something does not already exist, then it will create it...
I set up some basic logging in Django.
It turns out the problem with my mutations is that I needed to add a slash to my URL... REALLY?
PATCH is successful, and I'll probably use the PUT method later.
I'll need to rethink my architecture though.
The big question was should I use a GET hook for every piece of the sidebar component?
Or just call it once?
The GET hook should be fine since it's just going to grab it from the cache.
What I'm doing right now is small experiments for seeing what works and what does not.
PATCH method is working as intended.
It looks like every component that re-renders state, WILL need to have their own GET hook.

4/6/2022

Get the PUT method working for checkboxes.
If the hexagon is entirely new, clicking on the hexagon and changing the checkmark will create that hexagon.
The checkbox will re-render, however, the entire SVG element will re-render as well.
I can probably force a re-render by using useEffect to listen to hexagonFocused.
This is becoming needlessly complex.
I think I'll use a separate method of generating hexagons in the backend.
With this, I can have an ID ready instead of needing to create hexagons on the fly.
The initial load might be a lot, but ultimately it will be easier to work with.
Probably the most important thing will be that I can finally use a proper useQuery Hook to update the hex grid.
The useQuery hook will allow for the dynamic creation and update of Paths in the hex grid.
This will work.
The updated skill tree table will have a 256 new rows each labeled with their corresponding hex string.
The input of each row will an unique hex ID for that specific column.
This means that updating with the same hex ID will not be a problem.
Instead of deleting the additional info, I'll just create another skill tree.

+ Update the backend such that each skill tree has 256 unique hexagons the ID will be the appropriate hex string
    + Do NOT delete the Hexagon table
    Form of:
    h_0_1_m1
    where m means "minus sign"

4/8/2022

+ Update the frontend such that the hexgrid is generated from each db column

4/9/2022

You'll need to do two things:
1. Create the new hexagon without invalidating queries.
2. Update the Skill Tree hex string column and then invalidate the skill tree query.
This doesn't work because I don't know what ID to use to update the skill tree.
Instead, I'll need to update the skill tree after query invalidation.

1. Create New Hexagon
2. Skill Tree Query invalidates
3. Skill Tree hexagons are grabbed and processed.
4. If the Hexagon's hex_string matches hexagonFocused.hex_string, update hexagonFocused to be that Hexagon's properties.
    This would include the hex_id.
x Problem: Any hex_id would match the hex_string.
x Solved: useState to set the original hex_strings. If the new hex_string is not in the original hex_strings then change hexagonFocus to that and set new useState.

I don't actually need to update the skill tree.
Only the Hexagons need to be updated... Then invalidate the skill tree.
Later, I can optimize the API by creating a separate table for the base skill tree and then add that to the API with a serializer. Even better, I could preload the data into state if needed.
Either way, it's very important that state comes from one place.

1. Create New Hexagon
2. Skill Tree Query invalidates
3. Skill Tree hexagons are grabbed and processed.
    hexagonFocus does not need to be updated because I can just go by the hex_string
    If the hex_string for hexagonFocus matches the hex_string for an existing Hexagon, then assign hexagonFocus to that hex_id.

+ mutate hexagons data with sidebar

4/11/2022

Paths can only be created and deleted but not edited. This is to simplify the process.
k and an on-screen button will be used for Path Edit mode
    In path edit mode, the left sidebar will be invisible.
    Creation
    Instead of the sidebar, there will be a red sign with a transparent gray background that says "Path Edit Mode"
    Clicking on the first hexagon will highlight that hexagon.
        In the gray area, there will be button called DESELECT.
        Alternatively, the shortcut ctrl + Z will Deselect it as well.
    Clicking on the second hexagon will draw the path.
    Deletion    
    To delete a path, click on any path and either press the DELETE button in the sidebar or the backspace button.
    The gray background will be slightly transparent with red text of PATH EDIT MODE.
    Below path edit mode label, buttons will be listed below and will be disabled until they are needed or possible.
    Shortcuts signs will appear next to the buttons.
The states that will be needed:
    startingPathHexagon
        State will be cleared if deselect function is used
    endingPathHexagon
    pathEditMode
        Can only be turned on if the edit modes for other states are false.
        Button and shortcuts will appear at the top
        This will actually be a string with preset options.
            ON
            OFF
            INITIAL_CHOSEN


+ greyed out shortcut signs between the labels and the output
BRANCH ft-node-module IS COMPLETE
+ merge ft-node-module into staging and begin working on a new branch called ft-path-module
+ POST path api hook
+ DELETE path api hook
+ create static variables:
    + ON
    + OFF
    + initial chosen
+ pressing the k button when all other edit states are false, changes the sidebar to Path Edit Mode
~ Path Edit mode will have a gray transparent background with a title of PATH EDIT MODE in red text
    the normal yellow is fine
+ underneath path the edit mode label, there will be three buttons: deselect, delete, and exit path edit mode
    + deselect - shortcut z key
    + delete - shortcut backspace
    + exit - shortcut q - this button will always be active
+ clicking on one node and then another node draws a path
+ when an initial node is selected, it changes appearance and the Deselect button is enabled as well as its shortcut
+ if deselect button is pressed or shortcut used, the initial node will be deselected and the appearance will revert
+ buttons will be disabled until they are needed or possible
+ if the exit button or its shortcut is used at any time during the process, the pathFocused state will reset and the normal sidebar will return
+ Your next update
    x give an example of how the <pre> tag gets what you want, though without styling and an overly long horizontal scroll wheel
    + update on your work schedule - how you choose Weekend wednesdays

4/12/2022

I'm not sure how I'm going to change styling.
I did it by rendering an additional hexagon from data in the hexagonFocused state. Well that was easy.
Now that the path module is completed, I need look into how to create the accounts module.
Look into your django for REST APIs as well as custom django accounts.
I don't think I'll need a custom django account...
I think I can just create another table for additional info if I really need it.
I need:
    id
    first name
    last name
    email
It seems like W.S. Vincent is using CustomUser from abstract User. We'll see if I should use it, too.
page 101 in Django for REST APIs
https://gist.github.com/BaronKimaru/4a45928f6c5a35ea751d3007f2b7a8af
Chapter 7: 115
Chapter 8: 131
Chapter 11: 177



+ add padding to path edit mode sidebar
+ if an existing path is clicked in path edit mode, the delete button and its shortcut will be enabled, allowing deletion
    + add onClick functionality to path by rewriting the Path to something custom
+ make it so that clicking on a hexagon in pathEdit mode, changes it's fill color
+ make it so that clicking on a path in pathEdith mode, changes it's stroke color
+ make buttons functional
BRANCH ft-path-module COMPLETE
+ make the sidebar y-scrollable
+ interpret newlines, tabs, and more
+ add shadow and hover effects to buttons related to path Edit mode
+ add text size limit title and note body. Title limit is 70. Body limit is 10,000
+ merge ft-path-module to staging and create a new branch called ft-account-module

4/14/2022

I'm going to put off creating the home page until core functionality is done.
I'll create a simple login, logout, and account creation feature for the application.
This will lead into creating a tree-viewing page. I should probably organize the tree-viewing page with up to four tags.
I'll start with Final Form. I'll need react-final-form as well.
For now, I'll focus on creating the Endpoints.
I'll need to study React Router tonight.
https://reactrouterdotcom.fly.dev/docs/en/v6/getting-started/installation#basic-installation

+ page 107 - set up owner
+ makemigrations
+ migrate
+ page 142 - login, logout, verification, authentication
+ page 131 - set up View Level Permissions so that only owners can read and update their skill tree
+ backend endpoints for account creation, verification
+ backend permissions so that only the owner can edit
+ install final-form
+ install react-final-form
+ Comment out other components in App.tsx
+ create a login page
+ Create your own version of how to get a url for pictures based on this wikihow:
    https://www.wikihow.com/Get-the-URL-for-Pictures
    I don't want users to get slowed down or annoyed by ads.
    I believe this can be an ad-free experience.

4/15/2022

Routes specify attributes "path" and "element".
Link specify attribute "to" which goes to the path specified in "/about". This is pretty simple actually.
Routes can be a wrapper for multiple Route
Fortunately, my clientside routing is not that complex.
There is a specific use-case where I'll need to fetch data when component renders
https://reactrouterdotcom.fly.dev/docs/en/v6/getting-started/overview
It looks simple.
For now, it will look like:
/ > /login > /app
Honestly, this is getting harder and harder. I wonder if this will take me two weeks.
For now, it will look like:
/ > send login mutation to the backend > receive Token from REST API > store token in RTK state > automatically use token whenever query is made
backend login entry point:
http://127.0.0.1:8000/api/v1/dj-rest-auth/login/
I'll need to send something in the form of:
{
    "username": "",
    "email": "",
    "password": ""
}
React Router what to do after authentication:
https://stackblitz.com/github/remix-run/react-router/tree/main/examples/auth?file=src/App.tsx
I might need to redo the architecture on the frontend.
It's possible to get a response from a POST. The response that I would like to get is the Hexagon Data of the new Hexagon.
This would simplify and decrease chances of bugs when getting the new Hexagon.
I probably won't do the above yet just because it's working and the new solution may not be significantly better than the old.
I'll need to figure out the Forbidden Error eventually.
I'll study this error tonight. In the meantime...
I'll focus on creating various required pages.

+ import BrowserRouter and wrap it around the App
~ use React router to go to the main application once credentials are confirmed
~ Navbar at the top

4/16/2022

4/17/2022

Study Django and permissions on why you're getting 403 forbidden error
Permissions in Django
https://testdriven.io/blog/django-permissions/?utm_campaign=Django%2BNewsletter&utm_medium=email&utm_source=Django_Newsletter_123
Saving an authentication token to localstorage in Redux
https://michaelwashburnjr.com/blog/best-way-to-store-tokens-redux
The account module is complete.
home page
    > account registration
        > email confirmation needed page (email confirmation optional during development)
    > login
        > skill tree picker page sorted by most recently viewed by default
            - Each skill tree is going to need a unique profile picture and owner picture to more easily identify the skill tree.
            - add other sort methods later - such as by subject/tags or by name
            - There needs to be a way to add students for multiple users
        > User Settings page
            - notifications?
                I don't want to notify teachers at all. This is just a tool for optional feedback.
            - appearance
                - colorblind mode
                - dark mode
                - light mode



+ work on permissions so that testuser3 can grab the skill tree
    https://www.django-rest-framework.org/api-guide/authentication/
    It was not permissions. Authentication was done with keyword "Token" instead of "Bearer" in the authorization header.
+ save the token in some long term storage
+ make it so that clicking on a different hexagon closes forms and resets the state of the hexagons.
    It works but the intended affect was to close and reset the editing field.
    The state resets but the sidebar needs to re-render to reflect these changes.
+ create a functioning logout button
+ add owner field to hexagon table due to permissions
+ reset all states, including tool state, upon logout
    Perhaps I can't re-render it if it's invisible...
    I cannot re-render if it's invisible. I can, though, reset the state by reloading the window...
    The re-render was achieved by reloading the window upon logout.
BRANCH ft-account-module IS COMPLETE
+ merge ft-account-module into staging and switch to ft-create-pages

Write an article about:

- the next skill tree update

Tasks:

- sign for shortcut for pointer mode and drag mode
- map out the URLs needed
- design the home page with the parallax effect on Figma
    - desktop
    - mobile
- design the tree picking page on Figma
    - desktop
    - mobile
- design the "send to students" page on Figma
    - desktop
    - mobile
- design the profile page on Figma
    - desktop
    - mobile
- design the 404 page
    - desktop
    - mobile

- create student interface
    - quantitative feedback form
    - verbal feedback form
- create custom themes
    - The first custom theme must be a skyrim skill tree
- create skill tree page to pick which skill tree to use
    you'll probably need to use a search bar for this
- make it so that there is an option for a user to save a copy of a skill tree as their own
- use parallax affect for a stylish home page

Production

- page 185 in Django for REST APIs
- page 142 django for professionals - account email verification with sendgrid
- send email with skill tree link to a list of students on a textarea form separated by a new-line
    I only do this because domain emails cost money in Google

