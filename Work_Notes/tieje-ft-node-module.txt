3/21/2022

3/22/2022

I might use the react testing library. Well, I want to use the react testing library.
It's still very early on. I'm pretty sure I know what I want to do and it is fairly simple... I think.
https://testing-library.com/docs/react-testing-library/intro/
Do I need to make tests fo this application? Is it even big enough.
Well it probably is... I'll learn it at the very end. I don't think it will help yet.

+ make a unique ID for every hexagon
    The unique ID should be its position in the hexgrid.
    I actually don't need to create a unique id for every hexagon.
    I thought that I might need to create a unique id for every hexagon because I would be using path to refer to their position.
    If I'm going to add a IDs to the hexagons, I'm going to either use a pull request or fork it myself...
    Fortunately, I can use class instead. The pathfinding example pretty much has what I want. I won't need to fork it.
    the unique classes are of the form of:
    hexagon-group 18,3,-21
    This is how it's done in the pathfinding example:
    https://github.com/Hellenic/react-hexgrid/blob/master/examples/pathfinding/src/App.js
    It may be a good idea to implement its cursor-finder as well.
+ create a custom initial zoom
    For the custom initial zoom, I'm going to need to determine where I can get this from panZoom...
    I certainly will not be using the fitToView functionf for this one.
    https://github.com/chrvadala/react-svg-pan-zoom
    I'll need to change the useEffect function...
    https://github.com/chrvadala/react-svg-pan-zoom/blob/main/docs/documentation.md#methods
    zoomOnViewerCenter(scaleFactor) - This is function I'll need.
    It works but it's focusing on the true center of the window instead of the SVG...
    It's assuming the SVG is rendered in the center of the window.
    I'll try moving the SVG to the center of the window with Tailwind?
    Or do I use fitToViewer in combination with zoomOnViewerCenter?
    perhaps I'll just use the normal zoom() function instead
    - Unfortunately, for smaller screens, it will start slightly to the left, which is not the worst thing.
+ bind v key for pointer
+ bind h key for hand scrolling
    onKeyPress is for the input text field
    This was insightful.
    https://www.querythreads.com/listen-to-keypress-for-document-in-reactjs/
    I may use this package though:
    https://github.com/donavon/use-event-listener
    The actual code was a bit confusing, but looking at the example allowed me to figure out how to accomplish tool changes.
    https://github.com/chrvadala/react-svg-pan-zoom/blob/main/examples/controlled-component/src/App.js
+ install tailwind
+ Wrote an article on what I did in the past about searching for the right library.


3/23/2022

Consider buy this svg:
https://www.vectorstock.com/royalty-free-vector/kawaii-school-background-with-cute-education-vector-15321280

- make toolbar bigger for both desktop and mobile.
    It's a bit... difficult. I'll need to do this later.
+ get cute pencil and office stationary wall-paper background
+ add a tool tip for image link
+ create static instructor interface
    + Create static sidebar on the left. It must have:
        + title input
        + lesson text input
        + feedback checkboxes
            + quantitative
            + verbal
        + node picture link input
            x default pics
                no need yet
+ Write an article about binding keys to actions using the hook module and refer to the link that you found
x create stateful instructor interface with json served by graphQL
    I *can* do it. But I built the backend exactly how I want it AND I know how to update it so... I don't really need graphQL.

3/28/2022

I'll just use React Query instead of Axios. If I did use Axios, I would need to create my own promise and async await functions.

Node Module Design
Node text or node image, never both. If no node image, then the title will be used with ellipses in the hexagon.
Look into React query.
I'm going to need a state manager... Probably something like Redux.
State that I need to manage:
    - Drag mode vs pointer mode
        - Within Pointer mode: Path creation mode:
            While in pointer mode, paths can be created
            Path Creation shortcut should probably be the "k" key
            - Starting hexagon
            - ending hexagon
            - Paths can only be deleted and created, not updated
    - pointer mode
        - clicking on the node grabs note data for that node
            Only the owner will have edit buttons for editing
        - edit button changes the state of that component to edit mode
    - theme
Redux middleware: this is going to be useful for whenever I need to update the API
https://blog.isquaredsoftware.com/presentations/react-redux-ts-intro-2020-12/#/61
Great graphic for what it means for me:
https://blog.isquaredsoftware.com/presentations/react-redux-ts-intro-2020-12/#/62

Make sidebar stateful

+ breakdown the sidebar into components
+ try using Redux to manage pointer mode and drag mode
+ sidebar must disappear while in drag mode and appear while in pointer mode
    So actually, There are two kinds of modes: keyboard shortcuts change visibility and dragging while one-screen buttons change only dragging.
    This bug is now a feature. I need to make sure I don't reproduce this in other features

3/29/2022
https://blog.isquaredsoftware.com/presentations/react-redux-ts-intro-2020-12/#/62
Use an existing skill tree
Some logic like verbal, quantitative feedback will be updated frequently.
I won't be using RTK Query because it's meant to be used with createAPI. I already have an API.
It turns out that a lot of middleware is actually included by default.
I should focus on createAsyncThunk and createEntityAdapter.
extraReducers are used to respond to other action types beside the types generated.
They are meant to reference external actions.
https://redux-toolkit.js.org/api/createSlice
extraReducers allows you to respond to an action in your slice reducer but does not create an action creator function
For example, they would be used in responding to a createAsyncThunk action, or perhaps responding to an action from another slice.
I'm actually supposed to use multiple slices - perhaps one slice per each functionality.
x I'm going to wire up slices such that there is an extraReducer function handling the visibility of the sidebar...
    I won't do this because I'm using useEffect already for this and it might get needlessly complicated.
I'll use react query for CRUD functionality... It could actually replace redux because it's a server-state library.
I'll use React Query for making post requests and see how it compares to Redux. I could just axios at this point... but we'll see.
I'll use the second checkbox for comparison.
Testing was successful for React Query. Posting seems simple enough. Updating... is a different matter.
It looks like useState() is used a whole lot for keeping track of and updating local state within the function.
It looks like the way that queryClient actually works is that it saves everything to the cache.
This contrasts from Redux in that redux is functional and pure but storing variables in cache stores state...
I figured out redux, but... well... It might be worth building with React Query instead. Someone who has gone through all of these
libraries says not to learn redux and to just use anything else. It's not that hard.
There's actually a little tidbit about how "React Query is not a replacement for local/client state management."
It even cites cases where I should use a state manager.
https://react-query.tanstack.com/guides/does-this-replace-client-state
I've decided that I won't be using React Query because I'm going to need a real state manager for this project.

+ Image address will need an edit button
x Change sidebar visibility logic to react query

3/30/2022

I can't use a normal useQuery because it refreshes too much.
I can't use a hook query because updating re-rendering constantly is pretty bad for the client.
Every time I move anything, setState causes a re-render of the whole thing.
I don't think I actually need RTK Query...
I need to figure out where and when to fetch data in redux.
https://daveceddia.com/where-fetch-data-redux/

3/31/2022
4/1/2022
I need to look at this later.
https://redux-toolkit.js.org/usage/usage-guide
There are no default paths to generate, but I can keep an object of paths.
    Create new paths state in redux to keep track of >
    Path. In this case, it's probably ok to do play Hex() objects within this state.
    The only problem is creating the object.
I'm running into a problem with RTK query. I'm not using is correctly. I need to redo the slice for everything.
https://www.softkraft.co/how-to-setup-slices-with-redux-toolkit/
There is an "old" way of doing this, and then there is the more streamlined approach.
It's not really an "old" way, more like a "custom" way to grab data.
Mission accomplished. Paths were successfully applied and state is better managed by redux in the actual component.

Write an article about:
- the static instructor sidebar interface that you made
- how to create nested JSON with serializers in django rest apis
- modern redux tool kit development

- use RTK Query to GET data from skill_tree_id 3 and apply it to PanZoomHexGrid
    - Grab data from API and apply it
        + apply patterns
        + apply paths
        - apply data to sidebar
        - memoize data with Immer in your custom fetch

- Make it so that clicking on a hexagon and adding data to it, posts data to a new hexagon with a specific skill_tree_id
- checkboxes allow quantitative feedback allow verbal feedback
    x pass functions as props to function react component
    + add checkbox state to store
    + manually testing state changes
    + test posting boolean data to skill tree with skill_tree_id of 3
    x make git commit before fully switching to React Query
    x checkboxes functional with React Query, DO NOT delete Redux-related code yet
    - use RTK Query to update the hexagon that you're on

- custom initial zoom on the node that was last interacted-with
    - add this to localstorage or something like that
- search function
- search for node by title for the node - use regex
- Path module - press k button
- CRUD functionality
- Enter mode for drawing paths
- option to change the color of the path being created
- click on one node and then another node to draw a path
- Path-viewing function
- create student interface
    - quantitative feedback form
    - verbal feedback form
- create custom themes
    - The first custom theme must be skyrim skill tree

Accounts
- account set-up form
- account email verification
- send email with skill tree link to a list of students on a form separated by a new-line

